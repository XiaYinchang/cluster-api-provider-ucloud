/*
Copyright 2019 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha3

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	clusterv1 "sigs.k8s.io/cluster-api/api/v1alpha3"
)

const (
	// ClusterFinalizer allows ReconcileUCloudCluster to clean up UCLOUD resources associated with UCloudCluster before
	// removing it from the apiserver.
	ClusterFinalizer = "ucloudcluster.infrastructure.cluster.x-k8s.io"
)

// UCloudClusterSpec defines the desired state of UCloudCluster
type UCloudClusterSpec struct {
	// Project is the name of the project to deploy the cluster to.
	ProjectId string `json:"projectId"`

	// The UCLOUD Region the cluster lives in.
	Region string `json:"region"`

	// Version k8s version
	Version string `json:"version"`

	// ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
	// +optional
	ControlPlaneEndpoint clusterv1.APIEndpoint `json:"controlPlaneEndpoint"`

	// NetworkSpec encapsulates all things related to UCLOUD network.
	Network NetworkSpec `json:"network"`

	// Bastion
	// +optional
	Bastion BastionSpec `json:"bastion,omitempty"`
}

// UCloudClusterStatus defines the observed state of UCloudCluster
type UCloudClusterStatus struct {
	FailureDomains clusterv1.FailureDomains `json:"failureDomains,omitempty"`
	Network        Network                  `json:"network,omitempty"`

	// ClusterId generated by uk8s server
	ClusterId string `json:"clusterId,omitempty"`

	// Bastion
	Bastion *Instance `json:"bastion,omitempty"`

	Group Group `json:"group,omitempty"`

	Ready bool `json:"ready"`
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=ucloudclusters,scope=Namespaced,categories=cluster-api
// +kubebuilder:storageversion
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Cluster",type="string",JSONPath=".metadata.labels.cluster\\.x-k8s\\.io/cluster-name",description="Cluster to which this UCloudCluster belongs"
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.ready",description="Cluster infrastructure is ready for GCE instances"
// +kubebuilder:printcolumn:name="Network",type="string",JSONPath=".spec.network.name",description="UCLOUD network the cluster is using"
// +kubebuilder:printcolumn:name="Endpoint",type="string",JSONPath=".status.apiEndpoints[0]",description="API Endpoint",priority=1

// UCloudCluster is the Schema for the ucloudclusters API
type UCloudCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   UCloudClusterSpec   `json:"spec,omitempty"`
	Status UCloudClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UCloudClusterList contains a list of UCloudCluster
type UCloudClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UCloudCluster `json:"items"`
}

func init() {
	SchemeBuilder.Register(&UCloudCluster{}, &UCloudClusterList{})
}
